{
  "version": 1.1,
  "atDirectives": [
    {
      "name": "@tailwind",
      "description": "使用 `@tailwind` 指令将 Tailwind 的 `base`、`components`、`utilities` 和 `screens` 样式插入你的 CSS 中。",
      "references": [
        {
          "name": "Tailwind 文档",
          "url": "https://tailwindcss.com/docs/functions-and-directives#tailwind"
        }
      ]
    },
    {
      "name": "@apply",
      "description": "使用 `@apply` 指令可将任何现有的实用程序类内嵌到您自己的自定义 CSS 中。当您在 HTML 中发现一种常见的实用程序模式，并希望将其提取到新组件中时，这将非常有用。",
      "references": [
        {
          "name": "Tailwind 文档",
          "url": "https://tailwindcss.com/docs/functions-and-directives#apply"
        }
      ]
    },
    {
      "name": "@responsive",
      "description": "您可以通过在 `@responsive` 指令中封装自己的类的定义来生成响应式变体：\n```css\n@responsive {\n  .alert {\n    background-color: #E53E3E;\n  }\n}\n```\n",
      "references": [
        {
          "name": "Tailwind 文档",
          "url": "https://tailwindcss.com/docs/functions-and-directives#responsive"
        }
      ]
    },
    {
      "name": "@screen",
      "description": "`@screen` 指令允许您创建媒体查询，通过 **name** 来引用断点，而不是在自己的 CSS 中重复它们的值：\n```css\n@screen sm {\n  /* ... */\n}\n```\n…将会变成这样：\n```css\n@media (min-width: 640px) {\n  /* ... */\n}\n```\n",
      "references": [
        {
          "name": "Tailwind 文档",
          "url": "https://tailwindcss.com/docs/functions-and-directives#screen"
        }
      ]
    },
    {
      "name": "@variants",
      "description": "通过在 `@variants` 指令中封装实用程序的定义，生成 `hover`、`focus`、`active` 及其他**变量**：\n```css\n@variants hover, focus {\n   .btn-brand {\n    background-color: #3182CE;\n  }\n}\n```\n",
      "references": [
        {
          "name": "Tailwind 文档",
          "url": "https://tailwindcss.com/docs/functions-and-directives#variants"
        }
      ]
    }
  ]
}
